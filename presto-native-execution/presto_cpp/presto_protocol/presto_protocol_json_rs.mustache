#![allow(non_camel_case_types)]
#![allow(unused)]
#![allow(non_snake_case)]


use serde::Serialize;
use serde::Deserialize;
use serde::de::DeserializeOwned;
use uuid::Uuid;
use core::hash::Hash;
use std::fmt::Debug;
use serde_json::Value;
use ordered_float::OrderedFloat;

pub type Integer = i32;
pub type Double = f64;
pub type Long = i64;
pub type Short = i16;
pub type Boolean = bool;
pub type Map<K, V> = std::collections::BTreeMap<K, V>;
pub type List<T> = Vec<T>;

#[derive(Debug, Clone, Ord, Hash, PartialOrd, PartialEq, Eq, Serialize, Deserialize)]
pub struct Base64Encoded(pub String);

/// Types with custom serde implementations

#[derive(Clone, Debug, Hash, Eq, PartialEq, PartialOrd, Ord)]
pub struct TaskId {
    pub query_id: String,
    pub stage_id: i32,
    pub stage_execution_id: i32,
    pub id: i32,
    pub attempt_number: i32,
}

#[derive(Clone, Debug, Hash, Eq, PartialEq, PartialOrd, Ord)]
pub struct Lifespan(pub bool, pub i32);

#[derive(Clone, Debug, Hash, Eq, PartialEq, PartialOrd, Ord)]
pub struct DataSize(pub i64);


#[derive(Clone, Debug, Serialize, Deserialize, Hash, Eq, PartialEq, PartialOrd, Ord)]
pub struct Type(pub String);
//#[derive(Clone, Debug, Serialize, Deserialize, Hash, Eq, PartialEq, PartialOrd, Ord)]
// pub enum Type {
//     Parametric { inner: Box<Type> },
//     Boolean,
//     Bigint,
//     Int,
//     Char,
//     Varchar,
//     DateTime,
//     Date,
//     Decimal {scale: u16, precision: u16,},
//     LongDecimal {scale: u16, precision: u16 },
//     ShortDecimal {scale: u16, precision: u16,},
//     Double,
//     Real,
//     HyperLogLog { inner: Box<Type> },
//     Json,
//     Map { key: Box<Type>, value: Box<Type> },
//     P4HyperLogLog,
//     QuantileDigest,
//     Row { spec: Vec<(String, Box<Type>)> },
//     #[serde(rename = "time")]
//     Time,
//     #[serde(rename = "tinyint")]
//     TinyInt,
//     #[serde(rename = "unknown")]
//     Unknown,
//     #[serde(rename = "uuid")]
//     Uuid,
//     #[serde(rename = "varbinary")]
//     Varbinary
// }
#[derive(Clone, Debug, Serialize, Deserialize, Hash, Eq, PartialEq, PartialOrd, Ord)]
pub struct PlanNodeId(pub String);
#[derive(Clone, Debug, Serialize, Deserialize, Hash, Eq, PartialEq, PartialOrd, Ord)] // serialize and deserialize implemented separately
pub struct ConnectorId(pub String);

#[derive(Clone, Debug, Serialize, Deserialize, Hash, Eq, PartialEq, PartialOrd, Ord)]
pub struct TransactionId(pub String);

#[derive(Clone, Debug, Serialize, Deserialize, Hash, Eq, PartialEq, PartialOrd, Ord)]
pub struct TimeZoneKey(pub i16);

#[derive(Clone, Debug, Serialize, Deserialize, Hash, Eq, PartialEq, PartialOrd, Ord)]
pub struct Locale(pub String);

#[derive(Clone, Debug, Serialize, Deserialize, Hash, Eq, PartialEq, PartialOrd, Ord)]
pub struct OutputBufferId(pub i32);

#[derive(Clone, Debug, Serialize, Deserialize, Hash, Eq, PartialEq, PartialOrd, Ord)]
pub struct QueryId(pub String);

#[derive(Clone, Debug, Serialize, Deserialize, Hash, Eq, PartialEq, PartialOrd, Ord)]
pub struct MemoryPoolId(pub String);

#[derive(Clone, Debug, Serialize, Deserialize, Hash, Eq, PartialEq, PartialOrd, Ord)]
pub struct Duration(pub u128);

// #[derive(Clone, Debug, Serialize, Deserialize, Hash, Eq, PartialEq, PartialOrd, Ord)]
// #[serde(tag = "@type")]
// pub enum ValueSet {
//     #[serde(rename = "equatable")]
//     Equatable {
//         #[serde(rename = "type")]
//         prestoType: Type,
//         whiteList: bool,
//         entries: std::collections::HashSet<ValueEntry>
//     },
//     #[serde(rename = "sortable")]
//     Sortable {
//         prestoType: Type,
//         ranges: Vec<Range>
//     },
//     #[serde(rename = "allOrNone")]
//     AllOrNone {
//         #[serde(rename = "type")]
//         prestoType: Type,
//         all: bool
//     },
// }

#[derive(Clone, Debug, Serialize, Deserialize, Hash, Eq, PartialEq, PartialOrd, Ord)]
pub struct HiveType;

#[derive(Clone, Debug, Serialize, Deserialize, Hash, Eq, PartialEq, PartialOrd, Ord)]
pub struct TypeSignature(pub String);

//#[derive(Clone, Debug, Serialize, Deserialize, Hash, Eq, PartialEq, PartialOrd, Ord)]
//pub struct ColumnType;

#[derive(Clone, Debug, Serialize, Deserialize, Hash, Eq, PartialEq, PartialOrd, Ord)]
pub struct Subfield;

#[derive(Clone, Debug, Serialize, Deserialize, Hash, Eq, PartialEq, PartialOrd, Ord)]
pub struct URI(pub String);

#[derive(Clone, Debug, Serialize, Deserialize, Hash, Eq, PartialEq, PartialOrd, Ord)]
pub struct HostAddress;

#[derive(Clone, Debug, Serialize, Deserialize, Hash, Eq, PartialEq, PartialOrd, Ord)]
pub struct PlanFragmentId(pub String);

#[derive(Clone, Debug, Hash, Eq, PartialEq, PartialOrd, Ord)]
pub struct QualifiedObjectName {
    pub catalog_name: String,
    pub schema_name: String,
    pub object_name: String,
}

#[derive(Clone, Debug, Serialize, Deserialize, Hash, Eq, PartialEq, PartialOrd, Ord)]
pub struct SqlFunctionId;


#[derive(Clone, Debug, Serialize, Deserialize, Hash, Eq, PartialEq, PartialOrd, Ord)]
pub struct TupleDomain<T: Eq + Ord + PartialOrd + Hash + PartialEq> {
    domains: Option<std::collections::BTreeMap<T, Domain>>
}

#[derive(Clone, Debug, Serialize, Deserialize, Hash, Eq, PartialEq, PartialOrd, Ord)]
pub struct Block(pub Base64Encoded);

#[derive(Clone, Debug, Serialize, Deserialize, Hash, Eq, PartialEq, PartialOrd, Ord)]
pub struct HivePageSinkMetadata;

#[derive(Clone, Debug, Serialize, Deserialize, Hash, Eq, PartialEq, PartialOrd, Ord)]
pub struct HiveStorageFormat;

#[derive(Clone, Debug, Serialize, Deserialize, Hash, Eq, PartialEq, PartialOrd, Ord)]
pub struct WriterTarget;

#[derive(Clone, Debug, Serialize, Deserialize, Hash, Eq, PartialEq, PartialOrd, Ord)]
pub struct OperatorInfo;

#[derive(Clone, Debug, Serialize, Deserialize, Hash, Eq, PartialEq, PartialOrd, Ord)]
pub struct RuntimeStats(pub std::collections::BTreeMap<String, RuntimeMetric>);

#[derive(Clone, Debug, Serialize, Deserialize, Hash, Eq, PartialEq, PartialOrd, Ord)]
pub struct DateTime(pub chrono::DateTime<chrono::Utc>);

#[derive(Clone, Debug, Serialize, Deserialize, Hash, Eq, PartialEq, PartialOrd, Ord)]
pub struct SplitWeight;

{{#.}}
{{#struct}}
#[derive(Clone, Debug, Serialize, Deserialize, Hash, Eq, PartialEq, PartialOrd, Ord)]
pub struct {{class_name}} {
    {{#fields}}
    {{#edited_field_name}}#[serde(rename = "{{raw_field_name}}")]{{/edited_field_name}}
    pub {{&field_name}}: {{&field_text}},
    {{/fields}}
}
{{/struct}}
{{#enum}}
#[derive(Clone, Debug, Serialize, Deserialize, Hash, Eq, PartialEq, PartialOrd, Ord)]
pub enum {{class_name}} {
    {{#elements}}
    {{&element}},
    {{/elements}}
}
{{/enum}}
{{#abstract}}
#[derive(Clone, Debug, Serialize, Deserialize, Hash, Eq, PartialEq, PartialOrd, Ord)]
#[serde(tag = "@type")]
pub enum {{class_name}} {
    {{#entries}}
    #[serde(rename = "{{json_key}}")]
    {{&class_name}} {
        {{#fields}}
        {{#edited_field_name}}#[serde(rename = "{{raw_field_name}}")]{{/edited_field_name}}
        {{&field_name}}: {{&field_text}},
        {{/fields}}
    },
    {{/entries}}
}
{{/abstract}}

{{/.}}