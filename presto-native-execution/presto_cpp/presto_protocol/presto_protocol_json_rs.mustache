#![allow(non_camel_case_types)]
#![allow(unused)]
#![allow(non_snake_case)]


use serde::Serialize;
use serde::Deserialize;
use serde::de::DeserializeOwned;
use uuid::Uuid;
use core::hash::Hash;
use std::fmt::Debug;

type Integer = i32;
type Double = f64;
type Long = i64;
type Short = i16;
type Map<K, V> = std::collections::HashMap<K, V>;
type List<T> = Vec<T>;
type Base64Encoded = String;

#[derive(Clone, Debug, Hash, PartialEq, Eq, Serialize, Deserialize)]
pub struct Type;
#[derive(Clone, Debug, Hash, PartialEq, Eq, Serialize, Deserialize)]
pub struct RowExpression;
#[derive(Clone, Debug, Hash, PartialEq, Eq, Serialize, Deserialize)]
pub struct PlanNodeId(pub String);
#[derive(Clone, Debug, Hash, PartialEq, Eq, Serialize, Deserialize)] // serialize and deserialize implemented separately
pub struct ConnectorId(pub String);

#[derive(Clone, Debug, Hash, PartialEq, Eq, Serialize, Deserialize)]
pub struct TransactionId(pub String);

#[derive(Clone, Debug, PartialEq, Eq, Serialize, Deserialize)]
pub struct ConnectorTransactionHandle {
    #[serde(rename = "@type")]
    pub class: String,
    #[serde(flatten)]
    pub content: serde_json::Value,
}

#[derive(Clone, Debug, PartialEq, Eq, Serialize, Deserialize)]
pub struct ConnectorSplit {
    #[serde(rename = "@type")]
    pub class: String,
    #[serde(flatten)]
    pub content: serde_json::Value,
}

#[derive(Clone, Debug, Hash, PartialEq, Eq, Serialize, Deserialize)]
pub struct ConnectorInsertTableHandle;
#[derive(Clone, Debug, Hash, PartialEq, Eq, Serialize, Deserialize)]
pub struct ConnectorPartitioningHandle;
#[derive(Clone, Debug, Hash, PartialEq, Eq)]
pub struct TaskId {
    pub query_id: String,
    pub stage_id: i32,
    pub stage_execution_id: i32,
    pub id: i32,
    pub attempt_number: i32,
}
#[derive(Clone, Debug, Hash, PartialEq, Eq, Serialize, Deserialize)]
pub struct ConnectorTableHandle;
#[derive(Clone, Debug, Hash, PartialEq, Eq, Serialize, Deserialize)]
pub struct ConnectorOutputTableHandle;

#[derive(Clone, Debug, Hash, PartialEq, Eq, Serialize, Deserialize)]
pub struct ConnectorMetadataUpdateHandle;

#[derive(Clone, Debug, PartialOrd, PartialEq, Eq, Hash, Serialize, Deserialize)]
pub struct ColumnHandle;

#[derive(Clone, Debug, Hash, PartialEq, Eq, Serialize, Deserialize)]
pub struct TimeZoneKey(pub i16);

#[derive(Clone, Debug, Hash, PartialEq, Eq, Serialize, Deserialize)]
pub struct Locale(pub String);

#[derive(Clone, Debug, Hash, PartialEq, Eq, Serialize, Deserialize)]
pub struct SqlFunctinoId;

#[derive(Clone, Debug, Hash, PartialEq, Eq, Serialize, Deserialize)]
pub struct ConnectorTableLayoutHandle;

#[derive(Clone, Debug, Hash, PartialEq, Eq, Serialize, Deserialize)]
pub struct FunctionHandle;

#[derive(Clone, Debug, Hash, PartialEq, Eq, Serialize, Deserialize)]
pub struct PlanNode;

#[derive(Clone, Debug, Hash, PartialEq, PartialOrd, Eq, Ord, Serialize, Deserialize)]
pub struct Lifespan;

#[derive(Clone, Debug, Hash, PartialEq, Eq, Serialize, Deserialize)]
pub struct OutputBufferId;

#[derive(Clone, Debug, Hash, PartialEq, Eq, Serialize, Deserialize)]
pub struct QueryId(pub String);

#[derive(Clone, Debug, Hash, PartialEq, Eq, Serialize, Deserialize)]
pub struct MemoryPoolId(pub String);

#[derive(Clone, Debug, Hash)]
pub struct DataSize(pub i64);

#[derive(Clone, Debug, Hash, Serialize, Deserialize)]
pub struct Duration(pub u128);

#[derive(Clone, Debug, Hash, Serialize, Deserialize)]
pub struct ValueSet;

#[derive(Clone, Debug, Hash, PartialEq, Eq, Serialize, Deserialize)]
pub struct HiveType;

#[derive(Clone, Debug, Hash, PartialEq, Eq, Serialize, Deserialize)]
pub struct TypeSignature;

#[derive(Clone, Debug, Hash, PartialEq, Eq, Serialize, Deserialize)]
pub struct ColumnType;

#[derive(Clone, Debug, Hash, PartialEq, PartialOrd, Eq, Serialize, Deserialize)]
pub struct Subfield;

#[derive(Clone, Debug, Hash, Serialize, Deserialize)]
pub struct URI(pub String);

#[derive(Clone, Debug, Hash, Serialize, Deserialize)]
pub struct HostAddress;

#[derive(Clone, Debug, Hash, Serialize, Deserialize)]
pub struct PlanFragmentId(pub String);

#[derive(Clone, Debug, Hash, Serialize, Deserialize)]
pub struct QualifiedObjectName;

#[derive(Clone, Debug, Hash, PartialEq, Eq, Serialize, Deserialize)]
pub struct SqlFunctionId;


#[derive(Clone, Debug, Serialize, Deserialize)]
pub struct TupleDomain<T: Eq + Hash> {
    domains: Option<std::collections::HashMap<T, Domain>>
}

#[derive(Clone, Debug, Hash, Eq, PartialEq, Serialize, Deserialize)]
pub struct Block;

#[derive(Clone, Debug, Hash, Serialize, Deserialize)]
pub struct HivePageSinkMetadata;

#[derive(Clone, Debug, Hash, Serialize, Deserialize)]
pub struct HiveStorageFormat;

#[derive(Clone, Debug, Hash, Serialize, Deserialize)]
pub struct ExecutionWriterTarget;

#[derive(Clone, Debug, Hash, Serialize, Deserialize)]
pub struct WriterTarget;

#[derive(Clone, Debug, Hash, Serialize, Deserialize)]
pub struct OperatorInfo;

#[derive(Clone, Debug, Serialize, Deserialize, Default)]
pub struct RuntimeStats(std::collections::HashMap<String, RuntimeMetric>);

#[derive(Clone, Debug, Hash, Serialize, Deserialize)]
pub struct DateTime(pub chrono::DateTime<chrono::Utc>);

#[derive(Clone, Debug, Hash, Serialize, Deserialize)]
pub struct SplitWeight;

{{#.}}
{{#struct}}
#[derive(Clone, Debug, Serialize, Deserialize{{extraDerives}})]
pub struct {{class_name}} {
    {{#super}}
    #[serde(flatten)]
    pub super: {{&super_class}}
    {{/super}}
    {{#fields}}
    {{#edited_field_name}}#[serde(rename = "{{raw_field_name}}")]{{/edited_field_name}}
    pub {{&field_name}}: {{&field_text}},
    {{/fields}}
}
{{/struct}}
{{#enum}}
#[derive(Clone, Debug, Hash, Eq, PartialEq, PartialOrd, Serialize, Deserialize)]
pub enum {{class_name}} {
    {{#elements}}
    {{&element}},
    {{/elements}}
}
{{/enum}}
{{/.}}